FUNCTION  coc#client#get_channel()
    Defined: ~/.local/share/nvim/plugged/coc.nvim/autoload/coc/client.vim line 149
Called 8 times
Total time:   0.000044
 Self time:   0.000044

count  total (s)   self (s)
    8              0.000011   if s:is_vim
                                return a:client['channel']
    8              0.000004   endif
    8              0.000012   return a:client['chan_id']

FUNCTION  <SNR>53_notify()
    Defined: ~/.local/share/nvim/plugged/coc.nvim/autoload/coc/client.vim line 189
Called 8 times
Total time:   0.000534
 Self time:   0.000490

count  total (s)   self (s)
    8   0.000111   0.000067   let channel = coc#client#get_channel(self)
    8              0.000012   if empty(channel)
                                return ''
    8              0.000004   endif
    8              0.000008   try
    8              0.000006     if s:is_vim
                                  call ch_sendraw(channel, json_encode([0, [a:method, a:args]])."\n")
    8              0.000005     else
    8              0.000186       call call('rpcnotify', [channel, a:method] + a:args)
    8              0.000007     endif
                              catch /.*/
                                if v:exception =~# 'E475'
                                  if get(g:, 'coc_vim_leaving', 0)
                                    return
                                  endif
                                  echohl Error | echom '['.self.name.'] server connection lost' | echohl None
                                  let name = self.name
                                  call s:on_exit(name, 0)
                                  execute 'silent do User ConnectionLost'.toupper(name[0]).name[1:]
                                elseif v:exception =~# 'E12'
                                  " neovim's bug, ignore it
                                else
                                  echohl Error | echo 'Error on notify ('.a:method.'): '.v:exception | echohl None
                                endif
    8              0.000008   endtry

FUNCTION  airline#extensions#coc#get_error()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/coc.vim line 14
Called 18 times
Total time:   0.000613
 Self time:   0.000128

count  total (s)   self (s)
   18   0.000605   0.000120   return airline#extensions#coc#get('error')

FUNCTION  airline#util#append()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/util.vim line 49
Called 126 times
Total time:   0.000998
 Self time:   0.000998

count  total (s)   self (s)
  126              0.000279   if a:minwidth > 0 && airline#util#winwidth() < a:minwidth
                                return ''
  126              0.000045   endif
  126              0.000275   let prefix = s:spc == "\ua0" ? s:spc : s:spc.s:spc
  126              0.000256   return empty(a:text) ? '' : prefix.g:airline_left_alt_sep.s:spc.a:text

FUNCTION  coc#float#nvim_refresh_scrollbar()
    Defined: ~/.local/share/nvim/plugged/coc.nvim/autoload/coc/float.vim line 781
Called 2 times
Total time:   0.000069
 Self time:   0.000039

count  total (s)   self (s)
    2   0.000058   0.000028   let id = coc#float#get_related(a:winid, 'scrollbar')
    2              0.000004   if id && nvim_win_is_valid(id)
                                call coc#float#nvim_scrollbar(a:winid)
    2              0.000001   endif

FUNCTION  airline#themes#get_highlight()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/themes.vim line 35
Called 764 times
Total time:   0.219012
 Self time:   0.008482

count  total (s)   self (s)
  764   0.218686   0.008155     return call('airline#highlighter#get_highlight', [a:group] + a:000)

FUNCTION  airline#extensions#coc#get_warning()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/coc.vim line 10
Called 18 times
Total time:   0.000818
 Self time:   0.000124

count  total (s)   self (s)
   18   0.000810   0.000117   return airline#extensions#coc#get('warning')

FUNCTION  airline#extensions#coc#get_status()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/coc.vim line 46
Called 18 times
Total time:   0.000599
 Self time:   0.000180

count  total (s)   self (s)
                              " Shorten text for windows < 91 characters
   18   0.000581   0.000161   return airline#util#shorten(get(g:, 'coc_status', ''), 91, 9)

FUNCTION  <SNR>87_Highlight_Matching_Pair()
    Defined: /usr/share/nvim/runtime/plugin/matchparen.vim line 39
Called 2 times
Total time:   0.002432
 Self time:   0.002432

count  total (s)   self (s)
                              " Remove any previous match.
    2              0.000004   if exists('w:paren_hl_on') && w:paren_hl_on
    1              0.000002     silent! call matchdelete(3)
    1              0.000001     let w:paren_hl_on = 0
    2              0.000001   endif
                            
                              " Avoid that we remove the popup menu.
                              " Return when there are no colors (looks like the cursor jumps).
    2              0.000005   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
                                return
    2              0.000000   endif
                            
                              " Get the character under the cursor and check if it's in 'matchpairs'.
    2              0.000003   let c_lnum = line('.')
    2              0.000002   let c_col = col('.')
    2              0.000003   let before = 0
                            
    2              0.000003   let text = getline(c_lnum)
    2              0.000035   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
    2              0.000002   if empty(matches)
                                let [c_before, c] = ['', '']
    2              0.000001   else
    2              0.000006     let [c_before, c] = matches[1:2]
    2              0.000001   endif
    2              0.000025   let plist = split(&matchpairs, '.\zs[:,]')
    2              0.000006   let i = index(plist, c)
    2              0.000002   if i < 0
                                " not found, in Insert mode try character before the cursor
    1              0.000003     if c_col > 1 && (mode() == 'i' || mode() == 'R')
                                  let before = strlen(c_before)
                                  let c = c_before
                                  let i = index(plist, c)
    1              0.000001     endif
    1              0.000001     if i < 0
                                  " not found, nothing to do
    1              0.000001       return
                                endif
    1              0.000000   endif
                            
                              " Figure out the arguments for searchpairpos().
    1              0.000001   if i % 2 == 0
                                let s_flags = 'nW'
                                let c2 = plist[i + 1]
    1              0.000000   else
    1              0.000001     let s_flags = 'nbW'
    1              0.000001     let c2 = c
    1              0.000001     let c = plist[i - 1]
    1              0.000000   endif
    1              0.000001   if c == '['
    1              0.000000     let c = '\['
    1              0.000001     let c2 = '\]'
    1              0.000000   endif
                            
                              " Find the match.  When it was just before the cursor move it there for a
                              " moment.
    1              0.000001   if before > 0
                                let has_getcurpos = exists("*getcurpos")
                                if has_getcurpos
                                  " getcurpos() is more efficient but doesn't exist before 7.4.313.
                                  let save_cursor = getcurpos()
                                else
                                  let save_cursor = winsaveview()
                                endif
                                call cursor(c_lnum, c_col - before)
    1              0.000000   endif
                            
    1              0.000004   if !has("syntax") || !exists("g:syntax_on")
                                let s_skip = "0"
    1              0.000000   else
                                " Build an expression that detects whether the current cursor position is
                                " in certain syntax types (string, comment, etc.), for use as
                                " searchpairpos()'s skip argument.
                                " We match "escape" for special items, such as lispEscapeSpecial.
    1              0.000002     let s_skip = '!empty(filter(map(synstack(line("."), col(".")), ''synIDattr(v:val, "name")''), ' . '''v:val =~? "string\\|character\\|singlequote\\|escape\\|comment"''))'
                                " If executing the expression determines that the cursor is currently in
                                " one of the syntax types, then we want searchpairpos() to find the pair
                                " within those syntax types (i.e., not skip).  Otherwise, the cursor is
                                " outside of the syntax types and s_skip should keep its value so we skip
                                " any matching pair inside the syntax types.
                                " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
    1              0.000001     try
    1              0.000422       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
                                catch /^Vim\%((\a\+)\)\=:E363/
                                  " We won't find anything, so skip searching, should keep Vim responsive.
                                  return
    1              0.000001     endtry
    1              0.000001   endif
                            
                              " Limit the search to lines visible in the window.
    1              0.000006   let stoplinebottom = line('w$')
    1              0.000002   let stoplinetop = line('w0')
    1              0.000002   if i % 2 == 0
                                let stopline = stoplinebottom
    1              0.000001   else
    1              0.000002     let stopline = stoplinetop
    1              0.000000   endif
                            
                              " Limit the search time to 300 msec to avoid a hang on very long lines.
                              " This fails when a timeout is not supported.
    1              0.000003   if mode() == 'i' || mode() == 'R'
                                let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
    1              0.000000   else
    1              0.000004     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
    1              0.000000   endif
    1              0.000001   try
    1              0.001732     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
                              catch /E118/
                                " Can't use the timeout, restrict the stopline a bit more to avoid taking
                                " a long time on closed folds and long lines.
                                " The "viewable" variables give a range in which we can scroll while
                                " keeping the cursor at the same position.
                                " adjustedScrolloff accounts for very large numbers of scrolloff.
                                let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
                                let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
                                let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
                                " one of these stoplines will be adjusted below, but the current values are
                                " minimal boundaries within the current window
                                if i % 2 == 0
                                  if has("byte_offset") && has("syntax_items") && &smc > 0
                            	let stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
                            	let stopline = min([bottom_viewable, byte2line(stopbyte)])
                                  else
                            	let stopline = min([bottom_viewable, c_lnum + 100])
                                  endif
                                  let stoplinebottom = stopline
                                else
                                  if has("byte_offset") && has("syntax_items") && &smc > 0
                            	let stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
                            	let stopline = max([top_viewable, byte2line(stopbyte)])
                                  else
                            	let stopline = max([top_viewable, c_lnum - 100])
                                  endif
                                  let stoplinetop = stopline
                                endif
                                let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
    1              0.000001   endtry
                            
    1              0.000001   if before > 0
                                if has_getcurpos
                                  call setpos('.', save_cursor)
                                else
                                  call winrestview(save_cursor)
                                endif
    1              0.000000   endif
                            
                              " If a match is found setup match highlighting.
    1              0.000002   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
    1              0.000002     if exists('*matchaddpos')
    1              0.000044       call matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10, 3)
                                else
                                  exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
    1              0.000000     endif
    1              0.000001     let w:paren_hl_on = 1
    1              0.000000   endif

FUNCTION  coc#float#check_related()
    Defined: ~/.local/share/nvim/plugged/coc.nvim/autoload/coc/float.vim line 809
Called 6 times
Total time:   0.000663
 Self time:   0.000239

count  total (s)   self (s)
    6              0.000038   let invalids = []
    6   0.000514   0.000090   let ids = coc#float#get_float_win_list(1)
    6              0.000008   for id in ids
                                let target = getwinvar(id, 'target_winid', 0)
                                if (target && index(ids, target) == -1) || getwinvar(id, 'kind', '') == 'pum'
                                  call add(invalids, id)
                                endif
    6              0.000004   endfor
    6              0.000008   if !s:popup_list_api
    6              0.000023     let s:popup_list = filter(ids, "index(invalids, v:val) == -1")
    6              0.000003   endif
    6              0.000007   for id in invalids
                                call coc#float#close(id)
    6              0.000003   endfor

FUNCTION  coc#util#cursor()
    Defined: ~/.local/share/nvim/plugged/coc.nvim/autoload/coc/util.vim line 36
Called 2 times
Total time:   0.000016
 Self time:   0.000016

count  total (s)   self (s)
    2              0.000015   return [line('.') - 1, strchars(strpart(getline('.'), 0, col('.') - 1))]

FUNCTION  airline#parts#filetype()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/parts.vim line 102
Called 18 times
Total time:   0.000309
 Self time:   0.000182

count  total (s)   self (s)
   18   0.000299   0.000172   return (airline#util#winwidth() < 90 && strlen(&filetype) > 3) ? matchstr(&filetype, '...'). (&encoding is? 'utf-8' ? '…' : '>') : &filetype

FUNCTION  airline#parts#iminsert()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/parts.vim line 82
Called 18 times
Total time:   0.000094
 Self time:   0.000094

count  total (s)   self (s)
   18              0.000047   if g:airline_detect_iminsert && &iminsert && exists('b:keymap_name')
                                return toupper(b:keymap_name)
   18              0.000006   endif
   18              0.000010   return ''

FUNCTION  coc#float#get_related()
    Defined: ~/.local/share/nvim/plugged/coc.nvim/autoload/coc/float.vim line 1205
Called 2 times
Total time:   0.000030
 Self time:   0.000030

count  total (s)   self (s)
    2              0.000014   for winid in getwinvar(a:winid, 'related', [])
                                if getwinvar(winid, 'kind', '') ==# a:kind
                                  return winid
                                endif
    2              0.000002   endfor
    2              0.000002   return 0

FUNCTION  airline#extensions#coc#get()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/coc.vim line 18
Called 36 times
Total time:   0.001178
 Self time:   0.001178

count  total (s)   self (s)
   36              0.000118   if !exists(':CocCommand')
                                return ''
   36              0.000015   endif
   36              0.000084   let _backup = get(g:, 'coc_stl_format', '')
   36              0.000060   let is_err = (a:type  is# 'error')
   36              0.000027   if is_err
   18              0.000056     let g:coc_stl_format = get(g:, 'airline#extensions#coc#stl_format_err', '%E{[%e(#%fe)]}')
   18              0.000007   else
   18              0.000061     let g:coc_stl_format = get(g:, 'airline#extensions#coc#stl_format_warn', '%W{[%w(#%fw)]}')
   36              0.000015   endif
   36              0.000075   let info = get(b:, 'coc_diagnostic_info', {})
   36              0.000079   if empty(info) | return '' | endif
                            
                            
   36              0.000069   let cnt = get(info, a:type, 0)
   36              0.000042   if !empty(_backup)
   36              0.000059     let g:coc_stl_format = _backup
   36              0.000013   endif
                            
   36              0.000036   if empty(cnt)
   18              0.000012     return ''
   18              0.000007   else
   18              0.000079     let lnum = printf('(L%d)', (info.lnums)[is_err ? 0 : 1])
   18              0.000052     return (is_err ? s:error_symbol : s:warning_symbol).cnt.lnum
                              endif

FUNCTION  airline#mode_changed()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline.vim line 296
Called 4 times
Total time:   0.000102
 Self time:   0.000076

count  total (s)   self (s)
                              " airline#visual_active
                              " Boolean: for when to get visual wordcount
                              " needed for the wordcount extension
    4              0.000042   let g:airline#visual_active = (mode() =~? '[vs]')
    4   0.000053   0.000027   call airline#update_tabline()

FUNCTION  airline#util#winwidth()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/util.vim line 19
Called 126 times
Total time:   0.000908
 Self time:   0.000908

count  total (s)   self (s)
  126              0.000300   let nr = get(a:000, 0, 0)
  126              0.000196   if get(g:, 'airline_statusline_ontop', 0)
                                return &columns
  126              0.000052   else
  126              0.000181     return winwidth(nr)
                              endif

FUNCTION  airline#util#doautocmd()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/util.vim line 176
Called 4 times
Total time:   0.000264
 Self time:   0.000093

count  total (s)   self (s)
    4              0.000020   if !exists('#airline') && a:event !=? 'AirlineToggledOff'
                                " airline disabled
                                return
    4              0.000002   endif
    4   0.000232   0.000061   exe printf("silent doautocmd %s User %s", s:nomodeline, a:event)

FUNCTION  <SNR>50_Autocmd()
    Defined: ~/.local/share/nvim/plugged/coc.nvim/plugin/coc.vim line 245
Called 8 times
Total time:   0.000835
 Self time:   0.000096

count  total (s)   self (s)
    8              0.000015   if !g:coc_service_initialized
                                return
    8              0.000005   endif
    8   0.000801   0.000062   call coc#rpc#notify('CocAutocmd', a:000)

FUNCTION  airline#util#wrap()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/util.vim line 42
Called 162 times
Total time:   0.000815
 Self time:   0.000702

count  total (s)   self (s)
  162   0.000478   0.000365   if a:minwidth > 0 && airline#util#winwidth() < a:minwidth
                                return ''
  162              0.000056   endif
  162              0.000119   return a:text

FUNCTION  <SNR>102_exec_separator()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/highlighter.vim line 189
Called 382 times
Total time:   0.331310
 Self time:   0.017207

count  total (s)   self (s)
  382              0.000639     if pumvisible()
                                  return
  382              0.000142     endif
  382              0.001059     let group = a:from.'_to_'.a:to.a:suffix
  382   0.128035   0.003067     let l:from = airline#themes#get_highlight(a:from.a:suffix)
  382   0.097559   0.003515     let l:to = airline#themes#get_highlight(a:to.a:suffix)
  382              0.000320     if a:inverse
    6              0.000020       let colors = [ l:from[1], l:to[1], l:from[3], l:to[3] ]
  376              0.000154     else
  376              0.001285       let colors = [ l:to[1], l:from[1], l:to[3], l:from[3] ]
  382              0.000147     endif
  382              0.001395     let a:dict[group] = colors
  382   0.098997   0.003906     call airline#highlighter#exec(group, colors)

FUNCTION  airline#extensions#whitespace#check()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim line 64
Called 18 times
Total time:   0.001926
 Self time:   0.001524

count  total (s)   self (s)
   18              0.000078   let max_lines = get(g:, 'airline#extensions#whitespace#max_lines', 20000)
   18              0.000086   if &readonly || !&modifiable || !s:enabled || line('$') > max_lines || get(b:, 'airline_whitespace_disabled', 0)
                                return ''
   18              0.000007   endif
   18              0.000122   let skip_check_ft = extend(s:skip_check_ft, get(g:, 'airline#extensions#whitespace#skip_indent_check_ft', {}), 'force')
                            
   18              0.000043   if !exists('b:airline_whitespace_check')
                                let b:airline_whitespace_check = ''
                                let checks = get(b:, 'airline_whitespace_checks', get(g:, 'airline#extensions#whitespace#checks', s:default_checks))
                            
                                let trailing = 0
                                let check = 'trailing'
                                if index(checks, check) > -1 && index(get(skip_check_ft, &ft, []), check) < 0
                                  try
                                    let regexp = get(g:, 'airline#extensions#whitespace#trailing_regexp', '\s$')
                                    let trailing = search(regexp, 'nw')
                                  catch
                                    call airline#util#warning(printf('Whitespace: error occurred evaluating "%s"', regexp))
                                    echomsg v:exception
                                    return ''
                                  endtry
                                endif
                            
                                let mixed = 0
                                let check = 'indent'
                                if index(checks, check) > -1 && index(get(skip_check_ft, &ft, []), check) < 0
                                  let mixed = s:check_mixed_indent()
                                endif
                            
                                let mixed_file = ''
                                let check = 'mixed-indent-file'
                                if index(checks, check) > -1 && index(get(skip_check_ft, &ft, []), check) < 0
                                  let mixed_file = s:check_mixed_indent_file()
                                endif
                            
                                let long = 0
                                if index(checks, 'long') > -1 && &tw > 0
                                  let long = search('\%>'.&tw.'v.\+', 'nw')
                                endif
                            
                                let conflicts = 0
                                if index(checks, 'conflicts') > -1
                                  let conflicts = s:conflict_marker()
                                endif
                            
                                if trailing != 0 || mixed != 0 || long != 0 || !empty(mixed_file) || conflicts != 0
                                  let b:airline_whitespace_check = s:symbol
                                  if strlen(s:symbol) > 0
                                    let space = (g:airline_symbols.space)
                                  else
                                    let space = ''
                                  endif
                            
                                  if s:show_message
                                    if trailing != 0
                                      let trailing_fmt = get(g:, 'airline#extensions#whitespace#trailing_format', '[%s]trailing')
                                      let b:airline_whitespace_check .= space.printf(trailing_fmt, trailing)
                                    endif
                                    if mixed != 0
                                      let mixed_indent_fmt = get(g:, 'airline#extensions#whitespace#mixed_indent_format', '[%s]mixed-indent')
                                      let b:airline_whitespace_check .= space.printf(mixed_indent_fmt, mixed)
                                    endif
                                    if long != 0
                                      let long_fmt = get(g:, 'airline#extensions#whitespace#long_format', '[%s]long')
                                      let b:airline_whitespace_check .= space.printf(long_fmt, long)
                                    endif
                                    if !empty(mixed_file)
                                      let mixed_indent_file_fmt = get(g:, 'airline#extensions#whitespace#mixed_indent_file_format', '[%s]mix-indent-file')
                                      let b:airline_whitespace_check .= space.printf(mixed_indent_file_fmt, mixed_file)
                                    endif
                                    if conflicts != 0
                                      let conflicts_fmt = get(g:, 'airline#extensions#whitespace#conflicts_format', '[%s]conflicts')
                                      let b:airline_whitespace_check .= space.printf(conflicts_fmt, conflicts)
                                    endif
                                  endif
                                endif
   18              0.000006   endif
   18   0.000535   0.000133   return airline#util#shorten(b:airline_whitespace_check, 120, 9)

FUNCTION  <SNR>105_ws_refresh()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim line 185
Called 6 times
Total time:   0.000064
 Self time:   0.000064

count  total (s)   self (s)
    6              0.000022   if !exists('#airline')
                                " airline disabled
                                return
    6              0.000003   endif
    6              0.000021   if get(b:, 'airline_ws_changedtick', 0) == b:changedtick
    6              0.000004     return
                              endif
                              unlet! b:airline_whitespace_check
                              if get(g:, 'airline_skip_empty_sections', 0)
                                exe ':AirlineRefresh!'
                              endif
                              let b:airline_ws_changedtick = b:changedtick

FUNCTION  airline#extensions#hunks#get_raw_hunks()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/hunks.vim line 76
Called 18 times
Total time:   0.000717
 Self time:   0.000587

count  total (s)   self (s)
   18              0.000057   if !exists('b:source_func') || get(b:, 'source_func', '') is# 's:get_hunks_empty'
   18              0.000034     if get(g:, 'loaded_signify') && sy#buffer_is_active()
                                  let b:source_func = 's:get_hunks_signify'
   18              0.000050     elseif exists('*GitGutterGetHunkSummary')
                                  let b:source_func = 's:get_hunks_gitgutter'
   18              0.000027     elseif exists('*changes#GetStats')
                                  let b:source_func = 's:get_hunks_changes'
   18              0.000033     elseif exists('*quickfixsigns#vcsdiff#GetHunkSummary')
                                  let b:source_func = 'quickfixsigns#vcsdiff#GetHunkSummary'
   18   0.000219   0.000112     elseif s:coc_git_enabled()
                                  let b:source_func = 's:get_hunks_coc'
   18              0.000008     else
   18              0.000025       let b:source_func = 's:get_hunks_empty'
   18              0.000007     endif
   18              0.000007   endif
   18   0.000156   0.000132   return {b:source_func}()

FUNCTION  <SNR>102_group_not_done()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/highlighter.vim line 32
Called 66 times
Total time:   0.000464
 Self time:   0.000464

count  total (s)   self (s)
   66              0.000216     if index(a:list, a:name) == -1
   66              0.000153       call add(a:list, a:name)
   66              0.000050       return 1
                                else
                                  if &vbs
                                    echomsg printf("airline: group: %s already done, skipping", a:name)
                                  endif
                                  return 0
                                endif

FUNCTION  coc#float#get_float_win_list()
    Defined: ~/.local/share/nvim/plugged/coc.nvim/autoload/coc/float.vim line 606
Called 6 times
Total time:   0.000424
 Self time:   0.000424

count  total (s)   self (s)
    6              0.000011   let res = []
    6              0.000028   let all = get(a:, 1, 0)
    6              0.000010   if s:is_vim
                                if s:popup_list_api
                                  return filter(popup_list(), 'popup_getpos(v:val)["visible"]'.(all ? '' : '&& getwinvar(v:val, "float", 0)'))
                                endif
                                return filter(s:popup_list, 's:popup_visible(v:val)')
    6              0.000051   elseif has('nvim') && exists('*nvim_win_get_config')
    6              0.000010     let res = []
   18              0.000041     for i in range(1, winnr('$'))
   12              0.000023       let id = win_getid(i)
   12              0.000062       let config = nvim_win_get_config(id)
   12              0.000037       if empty(config) || empty(config['relative'])
   12              0.000012         continue
                                  endif
                                  " ignore border & button window & others
                                  if !all && !getwinvar(id, 'float', 0)
                                    continue
                                  endif
                                  call add(res, id)
    6              0.000006     endfor
    6              0.000008     return res
                              endif
                              return []

FUNCTION  airline#highlighter#highlight()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/highlighter.vim line 255
Called 4 times
Total time:   0.370219
 Self time:   0.016697

count  total (s)   self (s)
    4              0.000008     let bufnr = a:0 ? a:1 : ''
    4              0.000011     let p = g:airline#themes#{g:airline_theme}#palette
                            
                                " draw the base mode, followed by any overrides
    4              0.000023     let mapped = map(a:modes, 'v:val == a:modes[0] ? v:val : a:modes[0]."_".v:val')
    4              0.000008     let suffix = a:modes[0] == 'inactive' ? '_inactive' : ''
    4              0.000006     let airline_grouplist = []
    4              0.000021     let buffers_in_tabpage = sort(tabpagebuflist())
    4              0.000007     if exists("*uniq")
    4              0.000011       let buffers_in_tabpage = uniq(buffers_in_tabpage)
    4              0.000002     endif
                                " mapped might be something like ['normal', 'normal_modified']
                                " if a group is in both modes available, only define the second
                                " that is how this was done previously overwrite the previous definition
    8              0.000013     for mode in reverse(mapped)
    4              0.000017       if exists('g:airline#themes#{g:airline_theme}#palette[mode]')
    2              0.000006         let dict = g:airline#themes#{g:airline_theme}#palette[mode]
  402              0.000664         for kvp in items(dict)
  400              0.000430           let mode_colors = kvp[1]
  400              0.000339           let name = kvp[0]
  400              0.000547           if name is# 'airline_c' && !empty(bufnr) && suffix is# '_inactive'
                                        let name = 'airline_c'.bufnr
  400              0.000112           endif
                                      " do not re-create highlighting for buffers that are no longer visible
                                      " in the current tabpage
  400              0.001169           if name =~# 'airline_c\d\+'
  368              0.001340             let bnr = matchstr(name, 'airline_c\zs\d\+') + 0
  368              0.000564             if bnr > 0 && index(buffers_in_tabpage, bnr) == -1
  364              0.000181               continue
    4              0.000001             endif
   32              0.000112           elseif (name =~# '_to_') || (name[0:10] is# 'airline_tab' && !empty(suffix))
                                        " group will be redefined below at exec_separator
                                        " or is not needed for tabline with '_inactive' suffix
                                        " since active flag is 1 for builder)
   14              0.000009             continue
   22              0.000007           endif
   22   0.000328   0.000167           if s:group_not_done(airline_grouplist, name.suffix)
   22   0.007425   0.000183             call airline#highlighter#exec(name.suffix, mode_colors)
   22              0.000012           endif
                            
   22              0.000050           if !has_key(p, 'accents')
                                        " work around a broken installation
                                        " shouldn't actually happen, p should always contain accents
                                        continue
   22              0.000011           endif
                            
   66              0.000115           for accent in keys(s:accents)
   44              0.000094             if !has_key(p.accents, accent)
                                          continue
   44              0.000016             endif
   44              0.000145             let colors = copy(mode_colors)
   44              0.000088             if p.accents[accent][0] != ''
   22              0.000038               let colors[0] = p.accents[accent][0]
   44              0.000017             endif
   44              0.000065             if p.accents[accent][2] != ''
   22              0.000030               let colors[2] = p.accents[accent][2]
   44              0.000015             endif
   44              0.000062             if len(colors) >= 5
   44              0.000106               let colors[4] = get(p.accents[accent], 4, '')
                                        else
                                          call add(colors, get(p.accents[accent], 4, ''))
   44              0.000016             endif
   44   0.000694   0.000392             if s:group_not_done(airline_grouplist, name.suffix.'_'.accent)
   44   0.014886   0.000379               call airline#highlighter#exec(name.suffix.'_'.accent, colors)
   44              0.000023             endif
   66              0.000036           endfor
   24              0.000011         endfor
                            
    2              0.000004         if empty(s:separators)
                                      " nothing to be done
                                      continue
    2              0.000001         endif
                                    " TODO: optimize this
  384              0.000947         for sep in items(s:separators)
                                      " we cannot check, that the group already exists, else the separators
                                      " might not be correctly defined. But perhaps we can skip above groups
                                      " that match the '_to_' name, because they would be redefined here...
  382   0.336919   0.005609           call <sid>exec_separator(dict, sep[1][0], sep[1][1], sep[1][2], suffix)
  384              0.000305         endfor
    4              0.000002       endif
    8              0.000014     endfor

FUNCTION  coc#rpc#ready()
    Defined: ~/.local/share/nvim/plugged/coc.nvim/autoload/coc/rpc.vim line 32
Called 8 times
Total time:   0.000055
 Self time:   0.000055

count  total (s)   self (s)
    8              0.000030   if empty(s:client) || s:client['running'] == 0
                                return 0
    8              0.000003   endif
    8              0.000006   return 1

FUNCTION  airline#parts#ffenc()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/parts.vim line 108
Called 18 times
Total time:   0.000538
 Self time:   0.000538

count  total (s)   self (s)
   18              0.000070   let expected = get(g:, 'airline#parts#ffenc#skip_expected_string', '')
   18              0.000034   let bomb     = &bomb ? '[BOM]' : ''
   18              0.000096   let noeolf   = &eol ? '' : '[!EOL]'
   18              0.000137   let ff       = strlen(&ff) ? '['.&ff.']' : ''
   18              0.000089   if expected is# &fenc.bomb.noeolf.ff
                                return ''
   18              0.000007   else
   18              0.000067     return &fenc.bomb.noeolf.ff
                              endif

FUNCTION  airline#util#ignore_buf()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/util.vim line 136
Called 18 times
Total time:   0.000594
 Self time:   0.000594

count  total (s)   self (s)
   18              0.000099   let pat = '\c\v'. get(g:, 'airline#ignore_bufadd_pat', ''). get(g:, 'airline#extensions#tabline#ignore_bufadd_pat',  '!|defx|gundo|nerd_tree|startify|tagbar|term://|undotree|vimfiler')
   18              0.000481   return match(a:name, pat) > -1

FUNCTION  airline#update_tabline()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline.vim line 290
Called 6 times
Total time:   0.000034
 Self time:   0.000034

count  total (s)   self (s)
    6              0.000017   if get(g:, 'airline_statusline_ontop', 0)
                                call airline#extensions#tabline#redraw()
    6              0.000003   endif

FUNCTION  airline#parts#get()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/parts.vim line 49
Called 18 times
Total time:   0.000070
 Self time:   0.000070

count  total (s)   self (s)
   18              0.000062   return get(s:parts, a:key, {})

FUNCTION  airline#parts#paste()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/parts.vim line 63
Called 18 times
Total time:   0.000051
 Self time:   0.000051

count  total (s)   self (s)
   18              0.000044   return g:airline_detect_paste && &paste ? g:airline_symbols.paste : ''

FUNCTION  airline#parts#readonly()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/parts.vim line 89
Called 18 times
Total time:   0.000917
 Self time:   0.000323

count  total (s)   self (s)
                              " only consider regular buffers (e.g. ones that represent actual files,
                              " but not special ones like e.g. NERDTree)
   18   0.000776   0.000182   if !empty(&buftype) || airline#util#ignore_buf(bufname('%'))
                                return ''
   18              0.000008   endif
   18              0.000039   if &readonly && !filereadable(bufname('%'))
                                return '[noperm]'
   18              0.000007   else
   18              0.000028     return &readonly ? g:airline_symbols.readonly : ''
                              endif

FUNCTION  <SNR>103_get_hunks_empty()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/hunks.vim line 72
Called 18 times
Total time:   0.000024
 Self time:   0.000024

count  total (s)   self (s)
   18              0.000018   return ''

FUNCTION  <SNR>103_coc_git_enabled()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/hunks.vim line 18
Called 18 times
Total time:   0.000107
 Self time:   0.000107

count  total (s)   self (s)
   18              0.000065   if !exists("*CocAction") || !get(g:, 'airline#extensions#hunks#coc_git', 0)
                                 " coc-git extension is disabled by default
                                 " unless specifically being enabled by the user
                                 " (as requested from coc maintainer)
   18              0.000012     return 0
                              endif
                              return 1

FUNCTION  airline#check_mode()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline.vim line 216
Called 18 times
Total time:   0.373885
 Self time:   0.002145

count  total (s)   self (s)
   18              0.000063   if !has_key(s:contexts, a:winnr)
                                return ''
   18              0.000013   endif
   18              0.000048   let context = s:contexts[a:winnr]
                            
   18              0.000052   if get(w:, 'airline_active', 1)
   18              0.000039     let m = mode(1)
   18              0.000025     if m ==# "i"
                                  let mode = ['insert']
   18              0.000026     elseif m[0] ==# "i"
                                  let mode = ['insert']
   18              0.000015     elseif m ==# "Rv"
                                  let mode =['replace']
   18              0.000019     elseif m[0] ==# "R"
                                  let mode = ['replace']
   18              0.000146     elseif m[0] =~# '\v(v|V||s|S|)'
                                  let mode = ['visual']
   18              0.000015     elseif m ==# "t"
                                  let mode = ['terminal']
   18              0.000016     elseif m[0] ==# "c"
    2              0.000004       let mode = ['commandline']
   16              0.000014     elseif m ==# "no"   " does not work, most likely, Vim does not refresh the statusline in OP mode
                                  let mode = ['normal']
   16              0.000020     elseif m[0:1] ==# 'ni'
                                  let mode = ['insert']
                                  let m = 'ni'
   16              0.000007     else
   16              0.000030       let mode = ['normal']
   18              0.000009     endif
   18              0.000059     if exists("*VMInfos") && !empty(VMInfos())
                                  " Vim plugin Multiple Cursors https://github.com/mg979/vim-visual-multi
                                  let m = 'multi'
   18              0.000007     endif
   18              0.000102     if index(['Rv', 'no', 'ni', 'ix', 'ic', 'multi'], m) == -1
   18              0.000024       let m = m[0]
   18              0.000007     endif
   18              0.000061     let w:airline_current_mode = get(g:airline_mode_map, m, m)
                              else
                                let mode = ['inactive']
                                let w:airline_current_mode = get(g:airline_mode_map, '__')
   18              0.000008   endif
                            
   18              0.000065   if g:airline_detect_modified && &modified
                                call add(mode, 'modified')
   18              0.000008   endif
                            
   18              0.000029   if g:airline_detect_paste && &paste
                                call add(mode, 'paste')
   18              0.000006   endif
                            
   18              0.000158   if g:airline_detect_crypt && exists("+key") && !empty(&key)
                                call add(mode, 'crypt')
   18              0.000007   endif
                            
   18              0.000035   if g:airline_detect_spell && &spell
                                call add(mode, 'spell')
   18              0.000006   endif
                            
   18              0.000025   if &readonly || ! &modifiable
                                call add(mode, 'readonly')
   18              0.000007   endif
                            
   18              0.000054   let mode_string = join(mode)
   18              0.000047   if get(w:, 'airline_lastmode', '') != mode_string
    4   0.001310   0.000053     call airline#highlighter#highlight_modified_inactive(context.bufnr)
    4   0.370299   0.000080     call airline#highlighter#highlight(mode, string(context.bufnr))
    4   0.000436   0.000172     call airline#util#doautocmd('AirlineModeChanged')
    4              0.000009     let w:airline_lastmode = mode_string
   18              0.000006   endif
                            
   18              0.000016   return ''

FUNCTION  airline#highlighter#exec()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/highlighter.vim line 219
Called 452 times
Total time:   0.117974
 Self time:   0.033794

count  total (s)   self (s)
  452              0.000663     if pumvisible()
                                  return
  452              0.000162     endif
  452              0.000526     let colors = a:colors
  452              0.000737     if len(colors) == 4
  382              0.000733       call add(colors, '')
  452              0.000165     endif
                                " colors should always be string values
  452              0.006449     let colors = map(copy(colors), 'type(v:val) != type("") ? string(v:val) : v:val')
  452              0.000449     if s:is_win32term
                                  let colors[2] = s:gui2cui(get(colors, 0, ''), get(colors, 2, ''))
                                  let colors[3] = s:gui2cui(get(colors, 1, ''), get(colors, 3, ''))
  452              0.000171     endif
  452   0.073438   0.003838     let old_hi = airline#highlighter#get_highlight(a:group)
  452              0.002451     let new_hi = [colors[0], colors[1], printf('%s', colors[2]), printf('%s', colors[3]), colors[4]]
  452   0.011190   0.003005     let colors = s:CheckDefined(colors)
  452   0.009698   0.003303     if old_hi != new_hi || !s:hl_group_exists(a:group)
                                  let cmd = printf('hi %s%s', a:group, s:GetHiCmd(colors))
                                  try
                                    exe cmd
                                  catch /^Vim\%((\a\+)\)\=:E421:/ " color definition not found
                                    let group=matchstr(v:exception, '\w\+\ze=')
                                    let color=matchstr(v:exception, '=\zs\w\+')
                                    let cmd=substitute(cmd, color, 'grey', 'g')
                                    exe cmd
                                    call airline#util#warning('color definition for group ' . a:group . ' not found, using grey as fallback')
                                  catch
                                    call airline#util#warning('Error when running command: '. cmd)
                                  endtry
                                  if has_key(s:hl_groups, a:group)
                                    let s:hl_groups[a:group] = colors
                                  endif
  452              0.000152     endif

FUNCTION  <SNR>102_get_array()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/highlighter.vim line 60
Called 1216 times
Total time:   0.006475
 Self time:   0.006475

count  total (s)   self (s)
 1216              0.005984     return [ a:guifg, a:guibg, a:ctermfg, a:ctermbg, empty(a:opts) ? '' : join(a:opts, ',') ]

FUNCTION  airline#parts#spell()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/parts.vim line 67
Called 18 times
Total time:   0.000381
 Self time:   0.000381

count  total (s)   self (s)
   18              0.000189   let spelllang = g:airline_detect_spelllang ? printf(" [%s]", toupper(substitute(&spelllang, ',', '/', 'g'))) : ''
   18              0.000032   if g:airline_detect_spell && &spell
                                let winwidth = airline#util#winwidth()
                                if winwidth >= 90
                                  return g:airline_symbols.spell . spelllang
                                elseif winwidth >= 70
                                  return g:airline_symbols.spell
                                else
                                  return split(g:airline_symbols.spell, '\zs')[0]
                                endif
   18              0.000006   endif
   18              0.000011   return ''

FUNCTION  airline#parts#crypt()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/parts.vim line 59
Called 18 times
Total time:   0.000195
 Self time:   0.000195

count  total (s)   self (s)
   18              0.000185   return g:airline_detect_crypt && exists("+key") && !empty(&key) ? g:airline_symbols.crypt : ''

FUNCTION  airline#extensions#keymap#status()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/keymap.vim line 10
Called 18 times
Total time:   0.000549
 Self time:   0.000549

count  total (s)   self (s)
   18              0.000090   if (get(g:, 'airline#extensions#keymap#enabled', 1) && has('keymap'))
   18              0.000056     let short_codes = get(g:, 'airline#extensions#keymap#short_codes', {})
   18              0.000070     let label = get(g:, 'airline#extensions#keymap#label', g:airline_symbols.keymap)
   18              0.000040     let default = get(g:, 'airline#extensions#keymap#default', '')
   18              0.000020     if (label !=# '')
   18              0.000033       let label .= ' '
   18              0.000009     endif
   18              0.000027     let keymap = &keymap
   18              0.000036     if has_key(short_codes, keymap)
                                  let keymap = short_codes[keymap]
   18              0.000007     endif
   18              0.000088     return printf('%s', (!empty(keymap) && &iminsert ? (label . keymap) : (!empty(default) ? label . default : default)))
                              else
                                return ''
                              endif

FUNCTION  airline#parts#mode()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/parts.vim line 55
Called 18 times
Total time:   0.000619
 Self time:   0.000182

count  total (s)   self (s)
   18   0.000609   0.000171   return airline#util#shorten(get(w:, 'airline_current_mode', ''), 79, 1)

FUNCTION  <SNR>102_get_syn()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/highlighter.vim line 44
Called 4864 times
Total time:   0.172663
 Self time:   0.172663

count  total (s)   self (s)
 4864              0.004895     let color = ''
 4864              0.058555     if hlexists(a:group)
 3392              0.034256       let color = synIDattr(synIDtrans(hlID(a:group)), a:what, a:mode)
 4864              0.002332     endif
 4864              0.007518     if empty(color) || color == -1
                                  " should always exist
 1472              0.030985       let color = synIDattr(synIDtrans(hlID('Normal')), a:what, a:mode)
                                  " however, just in case
 1472              0.002674       if empty(color) || color == -1
                                    let color = 'NONE'
 1472              0.000585       endif
 4864              0.001624     endif
 4864              0.004105     return color

FUNCTION  airline#statusline()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline.vim line 207
Called 18 times
Total time:   0.000291
 Self time:   0.000291

count  total (s)   self (s)
   18              0.000124   if has_key(s:contexts, a:winnr)
   18              0.000141     return '%{airline#check_mode('.a:winnr.')}'.s:contexts[a:winnr].line
                              endif
                              " in rare circumstances this happens...see #276
                              return ''

FUNCTION  airline#highlighter#get_highlight()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/highlighter.vim line 68
Called 1216 times
Total time:   0.280130
 Self time:   0.100993

count  total (s)   self (s)
                                " only check for the cterm reverse attribute
                                " TODO: do we need to check all modes (gui, term, as well)?
 1216              0.021712     let reverse = synIDattr(synIDtrans(hlID(a:group)), 'reverse', 'cterm')
 1216              0.004295     if get(g:, 'airline_highlighting_cache', 0) && has_key(s:hl_groups, a:group)
                                  let res = s:hl_groups[a:group]
                                  return reverse ? [ res[1], res[0], res[3], res[2], res[4] ] : res
 1216              0.000584     else
 1216   0.055287   0.008252       let ctermfg = s:get_syn(a:group, 'fg', 'cterm')
 1216   0.050379   0.007819       let ctermbg = s:get_syn(a:group, 'bg', 'cterm')
 1216   0.050084   0.007592       let guifg = s:get_syn(a:group, 'fg', 'gui')
 1216   0.048135   0.007559       let guibg = s:get_syn(a:group, 'bg', 'gui')
 1216              0.014836       let bold = synIDattr(synIDtrans(hlID(a:group)), 'bold')
 1216              0.001126       if reverse
                                    let res = s:get_array(guibg, guifg, ctermbg, ctermfg, bold ? ['bold'] : a:000)
 1216              0.000578       else
 1216   0.016183   0.009709         let res = s:get_array(guifg, guibg, ctermfg, ctermbg, bold ? ['bold'] : a:000)
 1216              0.000567       endif
 1216              0.000398     endif
 1216              0.004963     let s:hl_groups[a:group] = res
 1216              0.000987     return res

FUNCTION  airline#util#shorten()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/util.vim line 28
Called 54 times
Total time:   0.001259
 Self time:   0.000843

count  total (s)   self (s)
   54   0.000848   0.000432   if airline#util#winwidth() < a:winwidth && len(split(a:text, '\zs')) > a:minwidth
                                if get(a:000, 0, 0)
                                  " shorten from tail
                                  return '…'.matchstr(a:text, '.\{'.a:minwidth.'}$')
                                else
                                  " shorten from beginning of string
                                  return matchstr(a:text, '^.\{'.a:minwidth.'}').'…'
                                endif
   54              0.000018   else
   54              0.000042     return a:text
                              endif

FUNCTION  airline#extensions#coc#get_current_function()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/coc.vim line 51
Called 18 times
Total time:   0.000078
 Self time:   0.000078

count  total (s)   self (s)
   18              0.000070   return get(b:, 'coc_current_function', '')

FUNCTION  airline#highlighter#highlight_modified_inactive()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/highlighter.vim line 205
Called 4 times
Total time:   0.001257
 Self time:   0.000123

count  total (s)   self (s)
    4              0.000015     if getbufvar(a:bufnr, '&modified')
                                  let colors = exists('g:airline#themes#{g:airline_theme}#palette.inactive_modified.airline_c') ? g:airline#themes#{g:airline_theme}#palette.inactive_modified.airline_c : []
    4              0.000002     else
    4              0.000032       let colors = exists('g:airline#themes#{g:airline_theme}#palette.inactive.airline_c') ? g:airline#themes#{g:airline_theme}#palette.inactive.airline_c : []
    4              0.000002     endif
                            
    4              0.000007     if !empty(colors)
    4   0.001179   0.000045       call airline#highlighter#exec('airline_c'.(a:bufnr).'_inactive', colors)
    4              0.000002     endif

FUNCTION  coc#rpc#notify()
    Defined: ~/.local/share/nvim/plugged/coc.nvim/autoload/coc/rpc.vim line 96
Called 8 times
Total time:   0.000740
 Self time:   0.000151

count  total (s)   self (s)
    8   0.000105   0.000051   if !coc#rpc#ready()
                                return ''
    8              0.000003   endif
    8   0.000611   0.000077   call s:client['notify'](a:method, a:args)
    8              0.000007   return ''

FUNCTION  airline#extensions#hunks#get_hunks()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/hunks.vim line 95
Called 18 times
Total time:   0.002317
 Self time:   0.001247

count  total (s)   self (s)
   18              0.000046   if !get(w:, 'airline_active', 0)
                                return ''
   18              0.000007   endif
                              " Cache values, so that it isn't called too often
   18   0.000432   0.000300   if exists("b:airline_hunks") && get(b:,  'airline_changenr', 0) == b:changedtick && airline#util#winwidth() == get(s:, 'airline_winwidth', 0) && get(b:, 'source_func', '') isnot# 's:get_hunks_signify' && get(b:, 'source_func', '') isnot# 's:get_hunks_gitgutter' && get(b:, 'source_func', '') isnot# 's:get_hunks_empty' && get(b:, 'source_func', '') isnot# 's:get_hunks_changes' && get(b:, 'source_func', '') isnot# 's:get_hunks_coc'
                                return b:airline_hunks
   18              0.000008   endif
   18   0.000841   0.000123   let hunks = airline#extensions#hunks#get_raw_hunks()
   18              0.000016   let string = ''
   18   0.000193   0.000123   let winwidth = get(airline#parts#get('hunks'), 'minwidth', 100)
   18              0.000024   if !empty(hunks)
                                " hunks should contain [added, changed, deleted]
                                for i in [0, 1, 2]
                                  if (s:non_zero_only == 0 && airline#util#winwidth() > winwidth) || hunks[i] > 0
                                    let string .= printf('%s%s ', s:hunk_symbols[i], hunks[i])
                                  endif
                                endfor
   18              0.000008   endif
   18   0.000215   0.000184   if index(airline#extensions#get_loaded_extensions(), 'branch') == -1 && string[-1:] == ' '
                                " branch extension not loaded, skip trailing whitespace
                                let string = string[0:-2]
   18              0.000006   endif
                            
   18              0.000024   let b:airline_hunks = string
   18              0.000023   let b:airline_changenr = b:changedtick
   18   0.000211   0.000092   let s:airline_winwidth = airline#util#winwidth()
   18              0.000015   return string

FUNCTION  <SNR>54_on_cursor_moved()
    Defined: ~/.local/share/nvim/plugged/vim-airline/plugin/airline.vim line 83
Called 2 times
Total time:   0.000028
 Self time:   0.000020

count  total (s)   self (s)
    2              0.000008   if winnr() != s:active_winnr || !exists('w:airline_active')
                                call s:on_window_changed('CursorMoved')
    2              0.000001   endif
    2   0.000016   0.000008   call airline#update_tabline()

FUNCTION  <SNR>102_CheckDefined()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/highlighter.vim line 108
Called 452 times
Total time:   0.008185
 Self time:   0.008185

count  total (s)   self (s)
                                " Checks, whether the definition of the colors is valid and is not empty or NONE
                                " e.g. if the colors would expand to this:
                                " hi airline_c ctermfg=NONE ctermbg=NONE
                                " that means to clear that highlighting group, therefore, fallback to Normal
                                " highlighting group for the cterm values
                            
                                " This only works, if the Normal highlighting group is actually defined, so
                                " return early, if it has been cleared
  452              0.001361     if !exists("g:airline#highlighter#normal_fg_hi")
                                  let g:airline#highlighter#normal_fg_hi = synIDattr(synIDtrans(hlID('Normal')), 'fg', 'cterm')
  452              0.000181     endif
  452              0.001044     if empty(g:airline#highlighter#normal_fg_hi) || g:airline#highlighter#normal_fg_hi < 0
                                  return a:colors
  452              0.000145     endif
                            
  452              0.001035     for val in a:colors
  452              0.000986       if !empty(val) && val !=# 'NONE'
  452              0.000402         return a:colors
                                  endif
                                endfor
                                " this adds the bold attribute to the term argument of the :hi command,
                                " but at least this makes sure, the group will be defined
                                let fg = g:airline#highlighter#normal_fg_hi
                                let bg = synIDattr(synIDtrans(hlID('Normal')), 'bg', 'cterm')
                                if empty(bg) || bg < 0
                                  " in case there is no background color defined for Normal
                                  let bg = a:colors[3]
                                endif
                                return a:colors[0:1] + [fg, bg] + [a:colors[4]]

FUNCTION  airline#util#prepend()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/util.vim line 63
Called 108 times
Total time:   0.000621
 Self time:   0.000621

count  total (s)   self (s)
  108              0.000247   if a:minwidth > 0 && airline#util#winwidth() < a:minwidth
                                return ''
  108              0.000040   endif
  108              0.000222   return empty(a:text) ? '' : a:text.s:spc.g:airline_right_alt_sep.s:spc

FUNCTION  <SNR>102_hl_group_exists()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/highlighter.vim line 99
Called 452 times
Total time:   0.006395
 Self time:   0.006395

count  total (s)   self (s)
  452              0.002193     if !hlexists(a:group)
                                  return 0
  452              0.002732     elseif empty(synIDattr(synIDtrans(hlID(a:group)), 'fg'))
                                  return 0
  452              0.000209     endif
  452              0.000274     return 1

FUNCTION  airline#extensions#get_loaded_extensions()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions.vim line 505
Called 18 times
Total time:   0.000031
 Self time:   0.000031

count  total (s)   self (s)
   18              0.000023   return s:loaded_ext

FUNCTIONS SORTED ON TOTAL TIME
count  total (s)   self (s)  function
   18   0.373885   0.002145  airline#check_mode()
    4   0.370219   0.016697  airline#highlighter#highlight()
  382   0.331310   0.017207  <SNR>102_exec_separator()
 1216   0.280130   0.100993  airline#highlighter#get_highlight()
  764   0.219012   0.008482  airline#themes#get_highlight()
 4864   0.172663             <SNR>102_get_syn()
  452   0.117974   0.033794  airline#highlighter#exec()
  452   0.008185             <SNR>102_CheckDefined()
 1216   0.006475             <SNR>102_get_array()
  452   0.006395             <SNR>102_hl_group_exists()
    2   0.002432             <SNR>87_Highlight_Matching_Pair()
   18   0.002317   0.001247  airline#extensions#hunks#get_hunks()
   18   0.001926   0.001524  airline#extensions#whitespace#check()
   54   0.001259   0.000843  airline#util#shorten()
    4   0.001257   0.000123  airline#highlighter#highlight_modified_inactive()
   36   0.001178             airline#extensions#coc#get()
  126   0.000998             airline#util#append()
   18   0.000917   0.000323  airline#parts#readonly()
  126   0.000908             airline#util#winwidth()
    8   0.000835   0.000096  <SNR>50_Autocmd()

FUNCTIONS SORTED ON SELF TIME
count  total (s)   self (s)  function
 4864              0.172663  <SNR>102_get_syn()
 1216   0.280130   0.100993  airline#highlighter#get_highlight()
  452   0.117974   0.033794  airline#highlighter#exec()
  382   0.331310   0.017207  <SNR>102_exec_separator()
    4   0.370219   0.016697  airline#highlighter#highlight()
  764   0.219012   0.008482  airline#themes#get_highlight()
  452              0.008185  <SNR>102_CheckDefined()
 1216              0.006475  <SNR>102_get_array()
  452              0.006395  <SNR>102_hl_group_exists()
    2              0.002432  <SNR>87_Highlight_Matching_Pair()
   18   0.373885   0.002145  airline#check_mode()
   18   0.001926   0.001524  airline#extensions#whitespace#check()
   18   0.002317   0.001247  airline#extensions#hunks#get_hunks()
   36              0.001178  airline#extensions#coc#get()
  126              0.000998  airline#util#append()
  126              0.000908  airline#util#winwidth()
   54   0.001259   0.000843  airline#util#shorten()
  162   0.000815   0.000702  airline#util#wrap()
  108              0.000621  airline#util#prepend()
   18              0.000594  airline#util#ignore_buf()

